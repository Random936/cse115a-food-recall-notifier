name: Build .NET MAUI iOS & Android Projects

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-15]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0

    - name: Install .NET MAUI Workload
      run: dotnet workload install maui

    - name: Select Xcode Version (For macOS iOS Build)
      run: sudo xcode-select -s /Applications/Xcode_16.2.app
      if: runner.os == 'macOS'

    - name: Find and build only .NET MAUI iOS and Android projects
      run: |
        $failedProjectCount=0
        $skippedProjectCount=0
        $excluded_projects_file="./eng/excluded_projects_" + "${{ runner.os }}".ToLower() + ".txt"
        $excluded_projects=@()

        $jobSummaryFile=$env:GITHUB_STEP_SUMMARY

        if (Test-Path $excluded_projects_file) {
            $excluded_projects = Get-Content -Path $excluded_projects_file | Where-Object { $_ -notmatch "^\s*#" -and $_ -match "\S" }
        }

        Write-Output "# .NET MAUI iOS & Android Build Status (${{ runner.os }})" | Out-File -FilePath $jobSummaryFile -Append
        Write-Output "| Project | Build Status |" | Out-File -FilePath $jobSummaryFile -Append
        Write-Output "|---|---|" | Out-File -FilePath $jobSummaryFile -Append

        Get-ChildItem -Path . -Filter *.csproj -File -Recurse | ForEach-Object {
            $csproj = $_.FullName
            $relativePath = (Resolve-Path -Path $csproj -Relative).Replace("\", "/")

            # Exclude non-MAUI projects
            if (!(Select-String -Path $csproj -Pattern '<UseMaui>true</UseMaui>' -Quiet)) {
                Write-Output "::notice:: Skipping non-MAUI project: $relativePath"
                Write-Output "| $relativePath | Skipped (Not MAUI) |" | Out-File -FilePath $jobSummaryFile -Append
                $skippedProjectCount++
                return
            }

            # Check if the project is in the exclusion list
            if ($excluded_projects -contains $relativePath) {
                Write-Output "::notice:: Skipping excluded project: $relativePath"
                Write-Output "| $relativePath | Skipped (Excluded) |" | Out-File -FilePath $jobSummaryFile -Append
                $skippedProjectCount++
                return
            }

            Write-Output "::group:: Building $relativePath"

            # Build iOS or Android based on OS
            if ($env:RUNNER_OS -eq "macOS") {
                Write-Output "Building for iOS..."
                dotnet build $csproj -f net8.0-ios -c Release
            }
            elseif ($env:RUNNER_OS -eq "Windows") {
                Write-Output "Building for Android..."
                dotnet build $csproj -f net8.0-android -c Release
            }

            if ($LASTEXITCODE -gt 0) {
                Write-Output "::error:: Build failed for $relativePath"
                Write-Output "| $relativePath | :x: |" | Out-File -FilePath $jobSummaryFile -Append
                $failedProjectCount++
            }
            else {
                Write-Output "Build succeeded for $relativePath"
                Write-Output "| $relativePath | :white_check_mark: |" | Out-File -FilePath $jobSummaryFile -Append
            }

            # Clean up bin/obj folders
            $proj_dir = [System.IO.Path]::GetDirectoryName($csproj)
            Write-Output "Cleaning up bin & obj in $proj_dir"
            try {
              Get-ChildItem -Path $proj_dir -Directory -Recurse -Include bin,obj | Remove-Item -Recurse -Force
            } catch {
              Write-Output "::warning:: Failed to clean up bin & obj in $proj_dir"  
            }

            Write-Output "::endgroup::"
        }

        if ($failedProjectCount -gt 0) {
            Write-Output "" | Out-File -FilePath $jobSummaryFile -Append
            Write-Output "# Failed builds: $failedProjectCount" | Out-File -FilePath $jobSummaryFile -Append
            Write-Output "# Skipped builds: $skippedProjectCount" | Out-File -FilePath $jobSummaryFile -Append
            exit $failedProjectCount
        }
      shell: pwsh
